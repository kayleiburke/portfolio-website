var react = require('react');
var useDeepCompare = require('use-deep-compare');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;
/**
 * Necessary to prevent mismatch between the client and server on initial render in ssr mode.
 */

var initImages = isBrowser ? Array.from(document.images) : []; // Live array, need to convert to a regular

var normInitImages;

var getLazyInitImages = function getLazyInitImages() {
  if (!normInitImages) {
    normInitImages = initImages.map(function (img) {
      return img.src;
    }).filter(function (src) {
      return !src.startsWith('data:image');
    });
  }

  return normInitImages;
};

var isInitImage = function isInitImage(src) {
  return getLazyInitImages().some(function (initImgSrc) {
    return src && (initImgSrc == null ? void 0 : initImgSrc.endsWith(src));
  });
};

var isInitSsr = function isInitSsr(isSsrMode, src) {
  if (isSsrMode === void 0) {
    isSsrMode = false;
  }

  if (isSsrMode && src && isBrowser && document.readyState !== 'complete' && isInitImage(src)) {
    return true;
  }

  return false;
};

function normArg(obj) {
  var normObj = _extends({}, obj, {
    srcset: obj.srcSet
  });

  delete normObj.srcSet;
  Object.keys(normObj).forEach(function (key) {
    if (normObj[key] === undefined) {
      delete normObj[key];
    }
  });
  return normObj;
}

var useProgressiveImage = function useProgressiveImage(_ref) {
  var imgArg = _ref.img,
      sourcesArg = _ref.sources,
      _ref$ssr = _ref.ssr,
      ssr = _ref$ssr === void 0 ? false : _ref$ssr;

  var _useState = react.useState(false),
      setRerender = _useState[1];

  var _useState2 = react.useState(undefined),
      errorEvent = _useState2[0],
      setErrorEvent = _useState2[1];

  var rerender = react.useCallback(function () {
    setRerender(function (prev) {
      return !prev;
    });
  }, []);
  var handleError = react.useCallback(function (event) {
    setErrorEvent(event);
  }, []); // eslint-disable-next-line consistent-return

  var image = useDeepCompare.useDeepCompareMemo(function () {
    var src = typeof imgArg === 'string' ? imgArg : imgArg == null ? void 0 : imgArg.src;

    if (src && isBrowser && !isInitSsr(ssr, src)) {
      var img = document.createElement('img');

      if (sourcesArg && sourcesArg.length > 0) {
        var pic = document.createElement('picture');
        sourcesArg == null ? void 0 : sourcesArg.forEach(function (sourceProps) {
          var source = document.createElement('source');
          Object.assign(source, normArg(sourceProps));
          pic.appendChild(source);
        });
        pic == null ? void 0 : pic.appendChild(img);
      }

      img.onload = rerender;
      img.onerror = handleError;
      Object.assign(img, normArg(typeof imgArg === 'string' ? {
        src: imgArg
      } : imgArg)); // eslint-disable-line @typescript-eslint/no-non-null-assertion

      return img;
    }
  }, [imgArg, sourcesArg, rerender, handleError, ssr]);
  react.useEffect(function () {
    return function () {
      if (image) {
        image.onload = null;
        image.onerror = null;
      }
    };
  }, [image]);

  if (image != null && image.complete || !image) {
    return [false, errorEvent];
  }

  return [true, errorEvent];
};

module.exports = useProgressiveImage;
//# sourceMappingURL=index.js.map
