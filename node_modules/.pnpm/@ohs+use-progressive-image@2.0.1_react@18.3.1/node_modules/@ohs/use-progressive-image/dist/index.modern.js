import { useState, useCallback, useEffect } from 'react';
import { useDeepCompareMemo } from 'use-deep-compare';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;
/**
 * Necessary to prevent mismatch between the client and server on initial render in ssr mode.
 */

const initImages = isBrowser ? Array.from(document.images) : []; // Live array, need to convert to a regular

let normInitImages;

const getLazyInitImages = () => {
  if (!normInitImages) {
    normInitImages = initImages.map(img => img.src).filter(src => !src.startsWith('data:image'));
  }

  return normInitImages;
};

const isInitImage = src => getLazyInitImages().some(initImgSrc => src && (initImgSrc == null ? void 0 : initImgSrc.endsWith(src)));

const isInitSsr = (isSsrMode = false, src) => {
  if (isSsrMode && src && isBrowser && document.readyState !== 'complete' && isInitImage(src)) {
    return true;
  }

  return false;
};

function normArg(obj) {
  const normObj = _extends({}, obj, {
    srcset: obj.srcSet
  });

  delete normObj.srcSet;
  Object.keys(normObj).forEach(key => {
    if (normObj[key] === undefined) {
      delete normObj[key];
    }
  });
  return normObj;
}

const useProgressiveImage = ({
  img: imgArg,
  sources: sourcesArg,
  ssr: _ssr = false
}) => {
  const [, setRerender] = useState(false);
  const [errorEvent, setErrorEvent] = useState(undefined);
  const rerender = useCallback(() => {
    setRerender(prev => !prev);
  }, []);
  const handleError = useCallback(event => {
    setErrorEvent(event);
  }, []); // eslint-disable-next-line consistent-return

  const image = useDeepCompareMemo(() => {
    const src = typeof imgArg === 'string' ? imgArg : imgArg == null ? void 0 : imgArg.src;

    if (src && isBrowser && !isInitSsr(_ssr, src)) {
      const img = document.createElement('img');

      if (sourcesArg && sourcesArg.length > 0) {
        const pic = document.createElement('picture');
        sourcesArg == null ? void 0 : sourcesArg.forEach(sourceProps => {
          const source = document.createElement('source');
          Object.assign(source, normArg(sourceProps));
          pic.appendChild(source);
        });
        pic == null ? void 0 : pic.appendChild(img);
      }

      img.onload = rerender;
      img.onerror = handleError;
      Object.assign(img, normArg(typeof imgArg === 'string' ? {
        src: imgArg
      } : imgArg)); // eslint-disable-line @typescript-eslint/no-non-null-assertion

      return img;
    }
  }, [imgArg, sourcesArg, rerender, handleError, _ssr]);
  useEffect(() => () => {
    if (image) {
      image.onload = null;
      image.onerror = null;
    }
  }, [image]);

  if (image != null && image.complete || !image) {
    return [false, errorEvent];
  }

  return [true, errorEvent];
};

export default useProgressiveImage;
//# sourceMappingURL=index.modern.js.map
