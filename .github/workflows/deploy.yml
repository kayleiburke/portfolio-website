name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build the Docker image
        run: |
          docker build -t my-react-app .

          # Tag the image for ECR
          docker tag my-react-app:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Register new task definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_FAMILY }})

          # Filter out unwanted fields using jq
          CLEAN_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | \
            jq '.taskDefinition | del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

          # Add/modify container definition with new image
          NEW_TASK_DEFINITION=$(echo "$CLEAN_TASK_DEFINITION" | \
            jq '.containerDefinitions[0].image = "${{ secrets.ECR_REPOSITORY }}:latest" | 
                .containerDefinitions[0].portMappings = [{containerPort: 80}]')

          echo "$NEW_TASK_DEFINITION" > new-task-def.json

          # Register the new task definition
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Update ECS service with load balancer
        run: |
          aws ecs update-service \
            --cluster my-react-cluster \
            --service my-react-service-lb \
            --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:us-east-2:034362046724:targetgroup/portfolio-website/02f53975ed68a9fe,containerName=my-react-container,containerPort=80
